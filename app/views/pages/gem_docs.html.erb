<% @title = "Gem Docs" %>
<% @subtitle = "how to use #{t(:title)}" %>
<p>
For gem publishers, you'll want to <%= link_to "first upgrade to the latest RubyGems version", page_url("download") %>. <strong>As of RubyGems 1.3.6, <code>gem push</code> and <code>gem owner</code> have been merged in, so you will only need to install the gemcutter gem for new commands like <code>gem webhook</code>.</strong>
</p>

<h4 id="push">gem push</h4>
<p>
Publish your gems to the world with one command. All that's required is your very own <%=t :title %> account. The first time you push, you'll be asked to log in, and then it will save your API key to <code>~/.gem/credentials</code>. Once your gem is pushed, it is processed, indexed, and uploaded to Amazon S3 behind the scenes and should be available for download within moments.
<pre><code>$ gem push pkg/gemcutter-0.1.3.gem
Enter your <%=t :title %> credentials. Don't have an account yet? Create one at <%=t :url %>/sign_up
Email:   nick@quaran.to
Password:
Signed in. Your api key has been stored in ~/.gem/credentials
Pushing gem to <%=t :title %>...
Successfully registered gem: gemcutter (0.1.3)</code></pre>
</p>

<h4 id="owner">gem owner</h4>
<p>
This command is used to give access to other users to push gems. They will also be able to edit the links through Gemcutter's web interface. You'll need to know the user's email address and they'll need a confirmed account.
<pre><code>$ gem owner gemcutter
Owners for gem: gemcutter
- josh@technicalpickles.com
- nick@quaran.to

$ gem owner gemcutter --remove josh@technicalpickles.com
Removed owner: josh@technicalpickles.com
Owners for gem: gemcutter
- nick@quaran.to

$ gem owner gemcutter --add josh@technicalpickles.com
Added owner: josh@technicalpickles.com
Owners for gem: gemcutter
- josh@technicalpickles.com
- nick@quaran.to</code></pre>
</p>

<h4 id="webhook">gem webhook</h4>
<p>
Register a webhook that will be called any time a gem is updated on Gemcutter. Webhooks can be created for either specific gems or all gems. In both cases you'll get a POST request of the gem in JSON format at the URL you specify in the command. You can also use this command to test fire a webhook for any gem. The JSON hash posted is the <%= link_to "API", page_url("api_docs") %> representation of the gem.
<pre><code>$ gem webhook rails --add http://example.com
Successfully created webhook for rails to http://example.com

$ gem webhook --global --add http://something.net
Adding webhook...
Successfully created webhook for all gems to http://something.net

$ gem webhook
rails:
- http://example.com
all gems:
- http://something.net

$ gem webhook -g
all gems:
- http://something.net

$ gem webhook rails
rails:
- http://example.com

$ gem webhook rails --remove http://example.com
Removing webhook...
Successfully removed webhook for rails to http://example.com

$ gem webhook rack --fire http://example.com
Test firing webhook...
Successfully deployed webhook for rack to http://example.com</code></pre>
</p>

<h4 id="tumble">gem tumble</h4>
<p>
This command has been deprecated since <%= link_to "#{t(:title)} is now the official gem source.", "http://update.gemcutter.org/2009/10/26/transition.html" %>
</p>

<h4 id="migrate">gem migrate</h4>
<p>
This command has been deprecated since <%= link_to "the RubyForge accounts have been migrated over.", "http://update.gemcutter.org/2009/12/10/rubyforge-accounts-migrated.html" %>
</p>
